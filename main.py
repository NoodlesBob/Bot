import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ContentType, Message
from aiogram.filters import Command
import logging

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
HIDDEN_CHANNEL_ID = -1002570163026  # ID –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É

if not BOT_TOKEN or not ADMIN_ID:
    raise ValueError("–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–µ –∑–∞–¥–∞–Ω—ñ!")

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–∏–Ω
pending_messages = {}

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫
def generate_keyboard(msg_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("‚úÖ –ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve:{msg_id}")],
            [InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{msg_id}")],
            [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏", callback_data=f"edit:{msg_id}")]
        ]
    )

# –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
@dp.message(Command("start"))
async def send_welcome(message: Message):
    text = (
        "üëã –í—ñ—Ç–∞—î–º–æ! –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.\n"
        "–ü—ñ—Å–ª—è –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∞ –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —á–∏ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –Ω–æ–≤–∏–Ω–∏."
    )
    await message.answer(text)

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏–Ω
@dp.message(lambda msg: msg.content_type in {ContentType.TEXT, ContentType.PHOTO, ContentType.VIDEO, ContentType.DOCUMENT})
async def handle_news(message: Message):
    pending_messages[message.message_id] = {
        "type": message.content_type,
        "file_id": (message.photo[-1].file_id if message.photo else
                    message.video.file_id if message.video else
                    message.document.file_id if message.document else None),
        "caption": message.text or message.caption or "üì© –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É"
    }

    await message.answer("‚úÖ –ù–æ–≤–∏–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!")
    admin_text = f"üìù –ù–æ–≤–∏–Ω–∞ –≤—ñ–¥ @{message.from_user.username or '–∞–Ω–æ–Ω—ñ–º'}:\n\n{pending_messages[message.message_id]['caption']}"

    try:
        if message.photo:
            await bot.send_photo(ADMIN_ID, pending_messages[message.message_id]['file_id'], admin_text, reply_markup=generate_keyboard(message.message_id))
        elif message.video:
            await bot.send_video(ADMIN_ID, pending_messages[message.message_id]['file_id'], admin_text, reply_markup=generate_keyboard(message.message_id))
        elif message.document:
            await bot.send_document(ADMIN_ID, pending_messages[message.message_id]['file_id'], admin_text, reply_markup=generate_keyboard(message.message_id))
        else:
            await bot.send_message(ADMIN_ID, admin_text, reply_markup=generate_keyboard(message.message_id))
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏
@dp.callback_query(lambda c: c.data.startswith("approve"))
async def approve_news(callback_query: CallbackQuery):
    message_id = int(callback_query.data.split(":")[1])

    if message_id not in pending_messages:
        await callback_query.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return

    news = pending_messages.pop(message_id)
    try:
        if news["type"] == ContentType.PHOTO:
            await bot.send_photo(HIDDEN_CHANNEL_ID, news["file_id"], news["caption"], disable_notification=True)
        elif news["type"] == ContentType.VIDEO:
            await bot.send_video(HIDDEN_CHANNEL_ID, news["file_id"], news["caption"], disable_notification=True)
        elif news["type"] == ContentType.DOCUMENT:
            await bot.send_document(HIDDEN_CHANNEL_ID, news["file_id"], news["caption"], disable_notification=True)
        else:
            await bot.send_message(HIDDEN_CHANNEL_ID, news["caption"], disable_notification=True)
        await callback_query.answer("‚úÖ –ù–æ–≤–∏–Ω–∞ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó!")

# –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏
@dp.callback_query(lambda c: c.data.startswith("reject"))
async def reject_news(callback_query: CallbackQuery):
    message_id = int(callback_query.data.split(":")[1])

    if pending_messages.pop(message_id, None):
        await callback_query.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
    else:
        await callback_query.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏
@dp.callback_query(lambda c: c.data.startswith("edit"))
async def edit_news(callback_query: CallbackQuery):
    message_id = int(callback_query.data.split(":")[1])

    if message_id not in pending_messages:
        await callback_query.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è!")
        return

    await callback_query.message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ü—ñ—î—ó –Ω–æ–≤–∏–Ω–∏:")

    @dp.message(lambda msg: msg.text)
    async def save_edit(new_message: Message):
        pending_messages[message_id]["caption"] = new_message.text
        await new_message.answer("‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        dp.message.middleware_stack.pop()  # –ó—É–ø–∏–Ω—è—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
