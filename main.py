import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ContentType, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
import os

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
HIDDEN_CHANNEL_ID = int(os.getenv("HIDDEN_CHANNEL_ID"))  # ID –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É

if not BOT_TOKEN or not ADMIN_ID or not HIDDEN_CHANNEL_ID:
    raise ValueError("BOT_TOKEN, ADMIN_ID –∞–±–æ HIDDEN_CHANNEL_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    session=AiohttpSession(),
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
pending_messages = {}

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
INSTRUCTION_TEXT = (
    "üìã *–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞:*\n\n"
    "1Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç.\n"
    "2Ô∏è‚É£ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–∑–≥–ª—è–Ω–µ –≤–∞—à—É –Ω–æ–≤–∏–Ω—É.\n"
    "3Ô∏è‚É£ –ü—ñ—Å–ª—è –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∞—à–∞ –Ω–æ–≤–∏–Ω–∞ –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞ —É –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ.\n\n"
    "üîí *–ê–Ω–æ–Ω—ñ–º–Ω—ñ—Å—Ç—å:*\n"
    "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –∞–Ω–æ–Ω—ñ–º–Ω–∏–º–∏. –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –±—É—Ç–∏ –ø—É–±–ª—ñ—á–Ω–æ –∑–≥–∞–¥–∞–Ω–∏–º–∏, –≤–∫–∞–∂—ñ—Ç—å —Ü–µ —É —Ç–µ–∫—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n"
    "üõ† *–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n"
    "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n"
    "/help - –û–ø–∏—Å —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞\n"
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def generate_approve_keyboard(message_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve:{message_id}")],
            [InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{message_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏", callback_data=f"edit:{message_id}")]
        ]
    )

# –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥—ñ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ! –û–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –Ω–∏–∂—á–µ —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é –Ω–æ–≤–∏–Ω—É.\n\n"
        + INSTRUCTION_TEXT,
        parse_mode="Markdown"
    )

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏–Ω –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@dp.message(F.content_type.in_({ContentType.TEXT, ContentType.PHOTO, ContentType.VIDEO, ContentType.DOCUMENT}))
async def handle_news(message: Message):
    global pending_messages
    pending_messages[message.message_id] = {
        "message": message,
        "media_type": message.content_type,
        "file_id": (
            message.photo[-1].file_id if message.photo else
            message.video.file_id if message.video else
            message.document.file_id if message.document else None
        ),
        "caption": message.text or message.caption or "üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —Ç–µ–∫—Å—Ç—É"
    }
    await message.answer("‚úÖ –¢–≤–æ—è –Ω–æ–≤–∏–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!")

    try:
        admin_message = f"üìù –ù–æ–≤–∏–Ω–∞ –≤—ñ–¥ @{message.from_user.username or '–∞–Ω–æ–Ω—ñ–º–∞'}:\n{pending_messages[message.message_id]['caption']}"
        if message.photo:
            await bot.send_photo(
                ADMIN_ID,
                photo=message.photo[-1].file_id,
                caption=admin_message,
                reply_markup=generate_approve_keyboard(message.message_id)
            )
        elif message.video:
            await bot.send_video(
                ADMIN_ID,
                video=message.video.file_id,
                caption=admin_message,
                reply_markup=generate_approve_keyboard(message.message_id)
            )
        elif message.document:
            await bot.send_document(
                ADMIN_ID,
                document=message.document.file_id,
                caption=admin_message,
                reply_markup=generate_approve_keyboard(message.message_id)
            )
        else:
            await bot.send_message(
                ADMIN_ID,
                admin_message,
                reply_markup=generate_approve_keyboard(message.message_id)
            )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –Ω–æ–≤–∏–Ω–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏
@dp.callback_query(F.data.startswith("approve"))
async def approve_news(callback: CallbackQuery):
    global pending_messages
    _, message_id = callback.data.split(":")
    message_data = pending_messages.pop(int(message_id), None)

    if message_data:
        try:
            if message_data["media_type"] == ContentType.PHOTO:
                await bot.send_photo(
                    HIDDEN_CHANNEL_ID,
                    photo=message_data["file_id"],
                    caption=message_data["caption"]
                )
            elif message_data["media_type"] == ContentType.VIDEO:
                await bot.send_video(
                    HIDDEN_CHANNEL_ID,
                    video=message_data["file_id"],
                    caption=message_data["caption"]
                )
            elif message_data["media_type"] == ContentType.DOCUMENT:
                await bot.send_document(
                    HIDDEN_CHANNEL_ID,
                    document=message_data["file_id"],
                    caption=message_data["caption"]
                )
            else:
                await bot.send_message(
                    HIDDEN_CHANNEL_ID,
                    text=message_data["caption"]
                )
            await callback.answer("‚úÖ –ù–æ–≤–∏–Ω—É –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏: {e}")
            await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
    else:
        await callback.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞!")

# –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏
@dp.callback_query(F.data.startswith("reject"))
async def reject_news(callback: CallbackQuery):
    global pending_messages
    _, message_id = callback.data.split(":")
    if pending_messages.pop(int(message_id), None):
        await callback.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
        await callback.message.edit_text("‚ùå –¶—è –Ω–æ–≤–∏–Ω–∞ –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
    else:
        await callback.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞!")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
