import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ContentType, Message
from aiogram.filters import Command
import logging

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
CHANNEL_ID = os.getenv("CHANNEL_ID")  # ID –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π
COMMENTS_GROUP_ID = -1002180841211  # ID –ø—Ä–∏–≤'—è–∑–∞–Ω–æ—ó –≥—Ä—É–ø–∏ –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω—å

if not BOT_TOKEN or not ADMIN_ID or not CHANNEL_ID or not COMMENTS_GROUP_ID:
    raise ValueError("–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–µ –∑–∞–¥–∞–Ω—ñ!")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–∏–Ω, —â–æ –æ—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
pending_messages = {}

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
INSTRUCTION_TEXT = (
    "üëã –í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ ChatGPT Ukraine!"
    "üìã *–Ø–∫ –ø—Ä–∞—Ü—é—î –±–æ—Ç ChatGPT Ukraine:*\n\n"
    "üîπ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç —ñ–∑ –≤–∞—à–æ—é –Ω–æ–≤–∏–Ω–æ—é.\n"
    "üîπ –Ø–∫—â–æ –Ω–æ–≤–∏–Ω–∞ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —ó—Ö –æ–∫—Ä–µ–º–æ, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.\n"
    "üîπ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≥–ª—è–Ω–µ –≤–∞—à—É –Ω–æ–≤–∏–Ω—É.\n"
    "üîπ –ü—ñ—Å–ª—è –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∞—à–∞ –Ω–æ–≤–∏–Ω–∞ –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª—ñ [ChatGPT Ukraine](https://t.me/ChatGPT_in_Ukraine).\n\n"
    "üõ† *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n"
    "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
    "/help - –Ø–∫ –ø—Ä–∞—Ü—é—î –±–æ—Ç"
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def generate_approve_keyboard(message_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve:{message_id}")],
            [InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{message_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏", callback_data=f"edit:{message_id}")]
        ]
    )

# –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥—ñ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ *ChatGPT Ukraine*! –û–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –Ω–∏–∂—á–µ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Å–≤–æ—ó –Ω–æ–≤–∏–Ω–∏:\n\n"
        + INSTRUCTION_TEXT,
        parse_mode="Markdown"
    )

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏–Ω –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@dp.message(lambda message: message.content_type in {ContentType.TEXT, ContentType.PHOTO, ContentType.VIDEO, ContentType.DOCUMENT})
async def handle_news(message: Message):
    pending_messages[message.message_id] = {
        "media_type": message.content_type,
        "file_id": (
            message.photo[-1].file_id if message.photo else
            message.video.file_id if message.video else
            message.document.file_id if message.document else None
        ),
        "caption": message.text or message.caption or "üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —Ç–µ–∫—Å—Ç—É"
    }

    await message.answer("‚úÖ –¢–≤–æ—è –Ω–æ–≤–∏–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")

    try:
        admin_message = f"üìù –ù–æ–≤–∏–Ω–∞ –≤—ñ–¥ @{message.from_user.username or '–∞–Ω–æ–Ω—ñ–º–∞'}:\n\n{pending_messages[message.message_id]['caption']}"
        if message.photo:
            await bot.send_photo(
                ADMIN_ID,
                photo=message.photo[-1].file_id,
                caption=admin_message,
                reply_markup=generate_approve_keyboard(message.message_id)
            )
        elif message.video:
            await bot.send_video(
                ADMIN_ID,
                video=message.video.file_id,
                caption=admin_message,
                reply_markup=generate_approve_keyboard(message.message_id)
            )
        elif message.document:
            await bot.send_document(
                ADMIN_ID,
                document=message.document.file_id,
                caption=admin_message,
                reply_markup=generate_approve_keyboard(message.message_id)
            )
        else:
            await bot.send_message(
                ADMIN_ID,
                admin_message,
                reply_markup=generate_approve_keyboard(message.message_id)
            )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("approve"))
async def approve_news(callback_query: CallbackQuery):
    message_id = int(callback_query.data.split(":")[1])
    if message_id not in pending_messages:
        await callback_query.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return

    message_data = pending_messages.pop(message_id)
    try:
        if message_data["media_type"] == ContentType.PHOTO:
            await bot.send_photo(
                CHANNEL_ID,
                photo=message_data["file_id"],
                caption=message_data["caption"]
            )
        elif message_data["media_type"] == ContentType.VIDEO:
            await bot.send_video(
                CHANNEL_ID,
                video=message_data["file_id"],
                caption=message_data["caption"]
            )
        elif message_data["media_type"] == ContentType.DOCUMENT:
            await bot.send_document(
                CHANNEL_ID,
                document=message_data["file_id"],
                caption=message_data["caption"]
            )
        else:
            await bot.send_message(
                CHANNEL_ID,
                text=message_data["caption"]
            )
        await callback_query.answer("‚úÖ –ù–æ–≤–∏–Ω–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞!")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")

# –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("reject"))
async def reject_news(callback_query: CallbackQuery):
    message_id = int(callback_query.data.split(":")[1])
    if pending_messages.pop(message_id, None):
        await callback_query.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
    else:
        await callback_query.answer("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
