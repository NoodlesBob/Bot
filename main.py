import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, ContentType
import logging

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
HIDDEN_CHANNEL_ID = -1002570163026  # ID –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –ù–æ–≤–∏–Ω–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
pending_messages = {}

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫
def generate_keyboard(msg_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("‚úÖ –ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve:{msg_id}")],
            [InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{msg_id}")]
        ]
    )

# –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
@dp.message(commands=["start"])
async def send_welcome(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ! –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ —á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.")

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏–Ω
@dp.message(lambda msg: msg.content_type in {ContentType.TEXT, ContentType.PHOTO, ContentType.VIDEO, ContentType.DOCUMENT})
async def handle_news(message: Message):
    pending_messages[message.message_id] = {
        "type": message.content_type,
        "file_id": (
            message.photo[-1].file_id if message.photo else
            message.video.file_id if message.video else
            message.document.file_id if message.document else None
        ),
        "caption": message.caption or message.text or "üì© –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É"
    }
    admin_message = f"üìù –ù–æ–≤–∏–Ω–∞ –≤—ñ–¥ @{message.from_user.username or '–∞–Ω–æ–Ω—ñ–º'}:\n\n{pending_messages[message.message_id]['caption']}"
    await message.answer("‚úÖ –ù–æ–≤–∏–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!")
    if message.photo:
        await bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=admin_message, reply_markup=generate_keyboard(message.message_id))
    elif message.video:
        await bot.send_video(ADMIN_ID, message.video.file_id, caption=admin_message, reply_markup=generate_keyboard(message.message_id))
    elif message.document:
        await bot.send_document(ADMIN_ID, message.document.file_id, caption=admin_message, reply_markup=generate_keyboard(message.message_id))
    else:
        await bot.send_message(ADMIN_ID, admin_message, reply_markup=generate_keyboard(message.message_id))

# –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏
@dp.callback_query(lambda c: c.data.startswith("approve"))
async def approve_news(callback_query: CallbackQuery):
    message_id = int(callback_query.data.split(":")[1])
    if message_id not in pending_messages:
        await callback_query.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    news = pending_messages.pop(message_id)
    try:
        if news["type"] == ContentType.PHOTO:
            await bot.send_photo(HIDDEN_CHANNEL_ID, news["file_id"], news["caption"])
        elif news["type"] == ContentType.VIDEO:
            await bot.send_video(HIDDEN_CHANNEL_ID, news["file_id"], news["caption"])
        elif news["type"] == ContentType.DOCUMENT:
            await bot.send_document(HIDDEN_CHANNEL_ID, news["file_id"], news["caption"])
        else:
            await bot.send_message(HIDDEN_CHANNEL_ID, news["caption"])
        await callback_query.answer("‚úÖ –ù–æ–≤–∏–Ω–∞ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó!")

# –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏
@dp.callback_query(lambda c: c.data.startswith("reject"))
async def reject_news(callback_query: CallbackQuery):
    message_id = int(callback_query.data.split(":")[1])
    if message_id in pending_messages:
        pending_messages.pop(message_id)
        await callback_query.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
    else:
        await callback_query.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
